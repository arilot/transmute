provider "aws" {
    access_key = "{{ aws_key }}"
    secret_key = "{{ aws_secret }}"
    region = "{{ aws_region }}"
}

terraform {
  backend "s3" {
    bucket = "terraform.{{ clusterName }}"
    key    = "terraform.tfstate"
    region = "{{ aws_region }}"
    access_key = "{{ aws_key }}"
    secret_key = "{{ aws_secret }}"

  }
}

data "aws_availability_zones" "available" {}

resource "aws_vpc" "{{ clusterName }}" {
  cidr_block = "10.0.0.0/16"

  tags = "${
    map(
     "Name", "{{ clusterName }}",
     "kubernetes.io/cluster/{{ clusterName }}", "shared",
    )
  }"
}

resource "aws_subnet" "{{ clusterName }}" {
  count = 2

  availability_zone = "${data.aws_availability_zones.available.names[count.index]}"
  cidr_block        = "10.0.${count.index}.0/24"
  vpc_id            = "${aws_vpc.{{ clusterName }}.id}"

  tags = "${
    map(
     "Name", "{{ clusterName }}",
     "kubernetes.io/cluster/{{ clusterName }}", "shared",
    )
  }"
}

resource "aws_internet_gateway" "{{ clusterName }}" {
  vpc_id = "${aws_vpc.{{ clusterName }}.id}"

  tags {
    Name = "{{ clusterName }}"
  }
}

resource "aws_route_table" "{{ clusterName }}" {
  vpc_id = "${aws_vpc.{{ clusterName }}.id}"

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = "${aws_internet_gateway.{{ clusterName }}.id}"
  }
}

resource "aws_route_table_association" "{{ clusterName }}" {
  count = 2

  subnet_id      = "${aws_subnet.{{ clusterName }}.*.id[count.index]}"
  route_table_id = "${aws_route_table.{{ clusterName }}.id}"
}

resource "aws_iam_role" "{{ clusterName }}-cluster" {
  name = "{{ clusterName }}"

  assume_role_policy = <<POLICY
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "{{ clusterName }}-cluster-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = "${aws_iam_role.{{ clusterName }}-cluster.name}"
}

resource "aws_iam_role_policy_attachment" "{{ clusterName }}-cluster-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = "${aws_iam_role.{{ clusterName }}-cluster.name}"
}

resource "aws_security_group" "{{ clusterName }}-cluster" {
  name        = "{{ clusterName }}"
  description = "Cluster communication with worker nodes"
  vpc_id      = "${aws_vpc.{{ clusterName }}.id}"

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags {
    Name = "{{ clusterName }}"
  }
}

resource "aws_security_group_rule" "{{ clusterName }}-cluster-ingress-workstation-https" {
  cidr_blocks       = ["{{ lookup('url', 'http://icanhazip.com/') | join("") }}/32"]
  description       = "Allow workstation to communicate with the cluster API Server"
  from_port         = 443
  protocol          = "tcp"
  security_group_id = "${aws_security_group.{{ clusterName }}-cluster.id}"
  to_port           = 443
  type              = "ingress"
}

resource "aws_eks_cluster" "{{ clusterName }}" {
  name            = "{{ clusterName }}"
  role_arn        = "${aws_iam_role.{{ clusterName }}-cluster.arn}"

  vpc_config {
    security_group_ids = ["${aws_security_group.{{ clusterName }}-cluster.id}"]
    subnet_ids         = ["${aws_subnet.{{ clusterName }}.*.id}"]
  }

  depends_on = [
    "aws_iam_role_policy_attachment.{{ clusterName }}-cluster-AmazonEKSClusterPolicy",
    "aws_iam_role_policy_attachment.{{ clusterName }}-cluster-AmazonEKSServicePolicy",
  ]
}

locals {
  kubeconfig = <<KUBECONFIG


apiVersion: v1
clusters:
- cluster:
    server: ${aws_eks_cluster.{{ clusterName }}.endpoint}
    certificate-authority-data: ${aws_eks_cluster.{{ clusterName }}.certificate_authority.0.data}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: aws
  name: aws
current-context: aws
kind: Config
preferences: {}
users:
- name: aws
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      command: aws-iam-authenticator
      args:
        - "token"
        - "-i"
        - "{{ clusterName }}"
KUBECONFIG
}

output "kubeconfig" {
  value = "${local.kubeconfig}"
}